const redisClient = require("../config/redis");
const User = require("../models/user");
const validate = require('../utils/validator');
const bcrypt = require("bcrypt");
const jwt = require('jsonwebtoken');
const Submission = require("../models/submission");

// Helper function for consistent error response
const sendAuthError = (res) => {
Â  Â  // 401 Unauthorized for login/registration failures to prevent enumeration
Â  Â  res.status(401).send("Error: Invalid credentials or authentication failed.");
};

//----------------------------------------------------------------------
// 1. REGISTER
//----------------------------------------------------------------------
const register = async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  // ðŸš¨ SERVER DEBUG LOGGING
Â  Â  Â  Â  console.log(`Attempting registration for email: ${req.body.emailId}`);
Â  Â  Â  Â  Â  
Â  Â  Â  Â  // Validate the data (assuming this utility handles input shape and basic checks)
Â  Â  Â  Â  validate(req.body);
Â  Â  Â  Â  
Â  Â  Â  Â  const { firstName, emailId, password } = req.body;

Â  Â  Â  Â  // ðŸ›‘ Check if user already exists
Â  Â  Â  Â  const existingUser = await User.findOne({ emailId });
Â  Â  Â  Â  if (existingUser) {
Â  Â  Â  Â  Â  Â  // 409 Conflict is the correct status for resource already existing
Â  Â  Â  Â  Â  Â  return res.status(409).send("Error: User with this email already exists.");
Â  Â  Â  Â  }

Â  Â  Â  Â  // Hash password and assign default role 'user'
Â  Â  Â  Â  const hashedPassword = await bcrypt.hash(password, 10);
Â  Â  Â  Â  
Â  Â  Â  Â  const userData = {
Â  Â  Â  Â  Â  Â  firstName,
Â  Â  Â  Â  Â  Â  emailId,
Â  Â  Â  Â  Â  Â  password: hashedPassword,
Â  Â  Â  Â  Â  Â  role: 'user', // Explicitly set role
Â  Â  Â  Â  };

Â  Â  Â  Â  const user = await User.create(userData);

Â  Â  Â  Â  // Check if JWT_KEY is defined before signing (prevents silent crash)
Â  Â  Â  Â  if (!process.env.JWT_KEY) {
Â  Â  Â  Â  Â  Â  console.error("FATAL ERROR: JWT_KEY is not defined in environment variables!");
Â  Â  Â  Â  Â  Â  return res.status(500).send("Server configuration error: JWT key missing.");
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  // Create JWT
Â  Â  Â  Â  const token = jwt.sign(
Â  Â  Â  Â  Â  Â  { _id: user._id, emailId: user.emailId, role: user.role },
Â  Â  Â  Â  Â  Â  process.env.JWT_KEY,
Â  Â  Â  Â  Â  Â  { expiresIn: '1h' } // Use string for clarity
Â  Â  Â  Â  );

Â  Â  Â  Â  const reply = {
Â  Â  Â  Â  Â  Â  firstName: user.firstName,
Â  Â  Â  Â  Â  Â  emailId: user.emailId,
Â  Â  Â  Â  Â  Â  _id: user._id,
Â  Â  Â  Â  Â  Â  role: user.role,
Â  Â  Â  Â  };

Â  Â  Â  Â  // Set cookie (maxAge is in milliseconds)
Â  Â  Â  Â  res.cookie('token', token, {
Â  Â  Â  Â  Â  Â  maxAge: 60 * 60 * 1000, // 1 hour
Â  Â  Â  Â  Â  Â  httpOnly: true, // Recommended for security
Â  Â  Â  Â  Â  Â  // Setting sameSite to 'none' if secure is false can cause issues.
Â  Â  Â  Â  Â  Â  // We will stick to 'strict' which is secure, but remember for deployment,
Â  Â  Â  Â  Â  Â  // you might need sameSite: 'none' AND secure: true if client and server are different domains.
Â  Â  Â  Â  Â  Â  sameSite: 'strict', 
Â  Â  Â  Â  Â  Â  secure: process.env.NODE_ENV === 'production', 
Â  Â  Â  Â  });

Â  Â  Â  Â  // Corrected response message
Â  Â  Â  Â  res.status(201).json({
Â  Â  Â  Â  Â  Â  user: reply,
Â  Â  Â  Â  Â  Â  message: "Registration Successful",
Â  Â  Â  Â  Â  Â  token: token 
Â  Â  Â  Â  });
Â  Â  } catch (err) {
Â  Â  Â  Â  // ðŸš¨ CRITICAL FIX: Log the full internal error stack
Â  Â  Â  Â  console.error("Registration failed internally:", err); 
Â  Â  Â  Â  
Â  Â  Â  Â  // Send a generic 400 response with the error message
Â  Â  Â  Â  res.status(400).send(`Error: Failed to register user. ${err.message || 'Unknown server error.'}`);
Â  Â  }
};

//----------------------------------------------------------------------
// 2. LOGIN
//----------------------------------------------------------------------
const login = async (req, res) => {
// ... (login function is unchanged)
Â  Â  try {
Â  Â  Â  Â  const { emailId, password } = req.body;

Â  Â  Â  Â  if (!emailId || !password) {
Â  Â  Â  Â  Â  Â  return sendAuthError(res); // Use generic error
Â  Â  Â  Â  }

Â  Â  Â  Â  const user = await User.findOne({ emailId });

Â  Â  Â  Â  // Check if user exists BEFORE accessing user.password
Â  Â  Â  Â  if (!user) {
Â  Â  Â  Â  Â  Â  return sendAuthError(res); // Use generic error
Â  Â  Â  Â  }

Â  Â  Â  Â  const match = await bcrypt.compare(password, user.password);

Â  Â  Â  Â  if (!match) {
Â  Â  Â  Â  Â  Â  return sendAuthError(res); // Use generic error
Â  Â  Â  Â  }

Â  Â  Â  Â  const reply = {
Â  Â  Â  Â  Â  Â  firstName: user.firstName,
Â  Â  Â  Â  Â  Â  emailId: user.emailId,
Â  Â  Â  Â  Â  Â  _id: user._id,
Â  Â  Â  Â  Â  Â  role: user.role,
Â  Â  Â  Â  };

Â  Â  Â  Â  // Create JWT
Â  Â  Â  Â  const token = jwt.sign(
Â  Â  Â  Â  Â  Â  { _id: user._id, emailId: user.emailId, role: user.role },
Â  Â  Â  Â  Â  Â  process.env.JWT_KEY,
Â  Â  Â  Â  Â  Â  { expiresIn: '1h' }
Â  Â  Â  Â  );

Â  Â  Â  Â  // Set cookie
Â  Â  Â  Â  res.cookie('token', token, {
Â  Â  Â  Â  Â  Â  maxAge: 60 * 60 * 1000, // 1 hour
Â  Â  Â  Â  Â  Â  httpOnly: true,
Â  Â  Â  Â  Â  Â  secure: process.env.NODE_ENV === 'production',
Â  Â  Â  Â  Â  Â  sameSite: 'strict',
Â  Â  Â  Â  });

Â  Â  Â  Â  res.status(200).json({ // Use 200 OK for a successful login
Â  Â  Â  Â  Â  Â  user: reply,
Â  Â  Â  Â  Â  Â  message: "Logged In Successfully",
Â  Â  Â  Â  Â  Â  token: token
Â  Â  Â  Â  });
Â  Â  } catch (err) {
Â  Â  Â  Â  // console.error(err); // Log internal errors
Â  Â  Â  Â  // Send generic 401 response for all login-related errors
Â  Â  Â  Â  sendAuthError(res);
Â  Â  }
};

//----------------------------------------------------------------------
// 3. LOGOUT
//----------------------------------------------------------------------
const logout = async (req, res) => {
// ... (logout function is unchanged)
Â  Â  try {
Â  Â  Â  Â  const token = req.cookies.token;

Â  Â  Â  Â  if (token) {
Â  Â  Â  Â  Â  Â  const payload = jwt.decode(token);

Â  Â  Â  Â  Â  Â  // Block the current token in Redis until its natural expiration time
Â  Â  Â  Â  Â  Â  // Use EXAT for absolute expiration time (in seconds)
Â  Â  Â  Â  Â  Â  if (redisClient) {
Â  Â  Â  Â  Â  Â  Â  Â  await redisClient.set(`token:${token}`, 'Blocked', 'EXAT', payload.exp);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  // Clear the cookie immediately
Â  Â  Â  Â  res.cookie("token", '', { 
Â  Â  Â  Â  Â  Â  expires: new Date(Date.now()), 
Â  Â  Â  Â  Â  Â  httpOnly: true,
Â  Â  Â  Â  Â  Â  secure: process.env.NODE_ENV === 'production',
Â  Â  Â  Â  Â  Â  sameSite: 'strict',
Â  Â  Â  Â  });
Â  Â  Â  Â  
Â  Â  Â  Â  res.send("Logged Out Successfully");

Â  Â  } catch (err) {
Â  Â  Â  Â  // Even if Redis fails or there's an error, still clear the cookie if possible.
Â  Â  Â  Â  res.cookie("token", '', { expires: new Date(Date.now()) });
Â  Â  Â  Â  // console.error(err);
Â  Â  Â  Â  res.status(500).send("Internal Server Error: Logout failed on the server side.");
Â  Â  }
};

//----------------------------------------------------------------------
// 4. ADMIN REGISTER
//----------------------------------------------------------------------
const adminRegister = async (req, res) => {
// ... (adminRegister function is unchanged)
Â  Â  try {
Â  Â  Â  Â  // The middleware for checking req.result.role should handle the authentication
Â  Â  Â  Â  // and authorization (e.g., only a SuperAdmin can create an Admin)

Â  Â  Â  Â  validate(req.body); 
Â  Â  Â  Â  const { firstName, emailId, password } = req.body;

Â  Â  Â  Â  // Check for existing user
Â  Â  Â  Â  const existingUser = await User.findOne({ emailId });
Â  Â  Â  Â  if (existingUser) {
Â  Â  Â  Â  Â  Â  return res.status(409).send("Error: User with this email already exists.");
Â  Â  Â  Â  }

Â  Â  Â  Â  const hashedPassword = await bcrypt.hash(password, 10);
Â  Â  Â  Â  
Â  Â  Â  Â  // Explicitly set role to 'admin'
Â  Â  Â  Â  const userData = {
Â  Â  Â  Â  Â  Â  firstName,
Â  Â  Â  Â  Â  Â  emailId,
Â  Â  Â  Â  Â  Â  password: hashedPassword,
Â  Â  Â  Â  Â  Â  role: 'admin', 
Â  Â  Â  Â  };

Â  Â  Â  Â  const user = await User.create(userData);

        if (!process.env.JWT_KEY) {
Â  Â  Â  Â  Â  Â  console.error("FATAL ERROR: JWT_KEY is not defined in environment variables!");
Â  Â  Â  Â  Â  Â  return res.status(500).send("Server configuration error: JWT key missing.");
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  const token = jwt.sign(
Â  Â  Â  Â  Â  Â  { _id: user._id, emailId: user.emailId, role: user.role },
Â  Â  Â  Â  Â  Â  process.env.JWT_KEY,
Â  Â  Â  Â  Â  Â  { expiresIn: '1h' }
Â  Â  Â  Â  );
Â  Â  Â  Â  
Â  Â  Â  Â  res.cookie('token', token, { 
Â  Â  Â  Â  Â  Â  maxAge: 60 * 60 * 1000,
Â  Â  Â  Â  Â  Â  httpOnly: true,
Â  Â  Â  Â  Â  Â  secure: process.env.NODE_ENV === 'production',
Â  Â  Â  Â  Â  Â  sameSite: 'strict',
Â  Â  Â  Â  });
Â  Â  Â  Â  
Â  Â  Â  Â  res.status(201).json({
Â  Â  Â  Â  Â  Â  message: "Admin Registered Successfully",
Â  Â  Â  Â  Â  Â  user: { firstName: user.firstName, emailId: user.emailId, role: user.role }
Â  Â  Â  Â  });
Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Admin registration failed internally:", err);
Â  Â  Â  Â  res.status(400).send(`Error: Failed to register admin. ${err.message || 'Unknown server error.'}`);
Â  Â  }
}

//----------------------------------------------------------------------
// 5. DELETE PROFILE
//----------------------------------------------------------------------
const deleteProfile = async (req, res) => {
// ... (deleteProfile function is unchanged)
Â  Â  try {
Â  Â  Â  Â  // Assuming req.result._id is correctly set by an authentication middleware
Â  Â  Â  Â  const userId = req.result._id; 
Â  Â  Â  Â  
Â  Â  Â  Â  // 1. Delete user from the User collection
Â  Â  Â  Â  const userDeleted = await User.findByIdAndDelete(userId);

Â  Â  Â  Â  if (!userDeleted) {
Â  Â  Â  Â  Â  Â  return res.status(404).send("Error: User not found.");
Â  Â  Â  Â  }

Â  Â  Â  Â  // Run to delete associated submissions
Â  Â  Â  Â  if (Submission) {
Â  Â  Â  Â  Â  Â  Â await Submission.deleteMany({ userId });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  // Clear the cookie for the user being deleted
Â  Â  Â  Â  res.cookie("token", '', { 
Â  Â  Â  Â  Â  Â  expires: new Date(Date.now()), 
Â  Â  Â  Â  Â  Â  httpOnly: true,
Â  Â  Â  Â  Â  Â  secure: process.env.NODE_ENV === 'production',
Â  Â  Â  Â  Â  Â  sameSite: 'strict',
Â  Â  Â  Â  });

Â  Â  Â  Â  res.status(200).send("Deleted Successfully. User and all associated submissions removed.");

Â  Â  } catch (err) {
Â  Â  Â  Â  // console.error(err);
Â  Â  Â  Â  res.status(500).send("Internal Server Error: Failed to delete profile.");
Â  Â  }
}

module.exports = { register, login, logout, adminRegister, deleteProfile };
